#include <DHT.h>
#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include<WiFiClient.h>
#include<ESP8266WebServer.h>
#include<ESP8266mDNS.h>
#include<SPI.h>
//byte mac[] = {0x24,0xF5,0xAA,0xEA,0x2A,0x7C);

#define PIN_DHT D4

DHT DHTsensor(PIN_DHT, DHT11); 

const char* ssid     = "bitr39";
const char* password = "bitbitr39";
char server[] = "192.168.1.24";

float humidityData;
float temperatureData;

WiFiClient client;

void setup() {
  Serial.begin(115200);
  delay(10);
  DHTsensor.begin();
  Serial.println();
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected");

  Serial.println("server started");
  Serial.print(WiFi.localIP());
  delay(1000);
  Serial.println("connecting...");
} //연결이 됫다 와이파이랑.



void loop(){
  humidityData = DHTsensor.readHumidity();
  temperatureData = DHTsensor.readTemperature();
  Sending_To_phpmyadmindatabase();
  delay(5000);
}

void Sending_To_phpmyadmindatabase(){
  humidityData = DHTsensor.readHumidity();
  temperatureData = DHTsensor.readTemperature();
  String url = "/192.168.1.24/dht11.php";
  url +="temperature=";
  url +=temperatureData;
  url +="&humidity=";
  url +=humidityData;
  
  if (client.connect(server,80)){
    client.print(String("GET ") +url+ "HTTP/1.1/r/n" + "Host: " + server + "/r/n" + "connection: close/r/n/r/n");
    /*
    Serial.println("connected");
    Serial.print("GET /192.168.1.24/dht11.php?humidity=");
    client.print("GET /192.168.1.24/dht11.php?humidity=");
    Serial.println(humidityData);
    client.println(humidityData);
    client.print("&temperature=");
    Serial.println("&temperature=");
    client.print(temperatureData);
    Serial.println(temperatureData);
    client.print(" ");
    client.print("HTTP/1.1");
    client.println();
    client.println("Host : 192.168.1.24");
    client.println("connection : close");
    client.println();
    */
  } else {
    Serial.println("connection falsed");
  }
}

/*
void loop() {
  
  // 센서값 DB 전송 부분
  if (WiFi.status() == WL_CONNECTED) 
  { 
  unsigned long currentMillis = millis();
  
  if(currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;
    float humidity = DHTsensor.readHumidity();
    float temp = DHTsensor.readTemperature();
    String phpHost = String(host)+"/insert.php?"+"$temp="+String(temp)+"$humidity="+String(humidity);
    Serial.print("Connect to ");
    Serial.println(phpHost);
    http.begin(client,phpHost);
    http.setTimeout(1000);
    int httpCode = http.GET();
   
    if(httpCode > 0) {
      Serial.printf("GET code %d\n\n: ", httpCode);
      //%d\n\n3
 
      if(httpCode == HTTP_CODE_OK) {
        String payload = http.getString();
        Serial.println(payload);
      }
    } 
    else {
      Serial.printf("GET failed, error: %s\n", http.errorToString(httpCode).c_str());
    }
    http.end();
  }
  }
  
  // 웹서버 부분
  client = server.available();
  if(!client) return;
 
  Serial.println("새로운 클라이언트");
  client.setTimeout(5000);
 
  String request = client.readStringUntil('\r');
  Serial.println("request: ");
  Serial.println(request);
 
  while(client.available()) {
    client.read();
  }
  
  float humidity = DHTsensor.readHumidity();
  float temp = DHTsensor.readTemperature();
 
  client.print("HTTP/1.1 200 OK");
  client.print("Content-Type: text/html");
  //\r\n\r\n
  client.print("<!DOCTYPE HTML>");
  client.print("<html>");
  client.print("<head>"); 
  client.print("<meta charset=\"UTF-8\" http-equiv=\"refresh\" content=\"1\">");
  client.print("<title>DHT senrsor test Webpage</title>");
  client.print("</head>");
  client.print("<body>");
  client.print("<h2>DHT senrsor test Webpage</h2>");
  client.print("<br>");
  client.print("Temperature : ");
  client.print(temp);
  client.print(" °C");
  client.print("<br>");
  client.print("Humidity : ");
  client.print(humidity);
  client.print(" %");
  client.print("</body>");
  client.print("</html>");
  Serial.println("클라이언트 연결 해제");
  
}
*/